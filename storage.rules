rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {
    
    // Função auxiliar para verificar autenticação
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Função para verificar se o veículo pertence ao usuário
    function vehicleBelongsToUser(vehicleId) {
      return isAuthenticated() && 
             firestore.get(/databases/(default)/documents/vehicles/$(vehicleId)).data.userId == request.auth.uid;
    }
    
    // Função para validar tipo de arquivo
    function isValidFileType() {
      return request.resource.contentType.matches('image/.*') || 
             request.resource.contentType == 'application/pdf';
    }
    
    // Função para validar tamanho do arquivo (máx 5MB)
    function isValidFileSize() {
      return request.resource.size <= 5 * 1024 * 1024;
    }
    
    // Regras para anexos de manutenção
    match /maintenance/{vehicleId}/{fileName} {
      // Permitir leitura se o veículo pertence ao usuário
      allow read: if vehicleBelongsToUser(vehicleId);
      
      // Permitir upload se:
      // 1. Usuário autenticado
      // 2. Veículo pertence ao usuário
      // 3. Tipo de arquivo válido (imagem ou PDF)
      // 4. Tamanho menor que 5MB
      allow write: if isAuthenticated() && 
                      vehicleBelongsToUser(vehicleId) &&
                      isValidFileType() &&
                      isValidFileSize();
      
      // Permitir exclusão se o veículo pertence ao usuário
      allow delete: if vehicleBelongsToUser(vehicleId);
    }
    
    // Bloquear acesso a todos os outros caminhos
    match /{allPaths=**} {
      allow read, write: if false;
    }
  }
}
