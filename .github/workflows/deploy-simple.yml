name: 🚀 Deploy Web (Simplified)

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
  workflow_dispatch:

env:
  NODE_VERSION: '20'

jobs:
  # Job 1: Quality Check
  quality-check:
    name: ✅ Quality Check
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: 📚 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🔍 Type check
        run: pnpm run type-check

      - name: 🏗️ Build check
        run: pnpm run build
        env:
          VITE_FIREBASE_API_KEY: ${{ secrets.VITE_FIREBASE_API_KEY }}
          VITE_FIREBASE_AUTH_DOMAIN: ${{ secrets.VITE_FIREBASE_AUTH_DOMAIN }}
          VITE_FIREBASE_PROJECT_ID: ${{ secrets.VITE_FIREBASE_PROJECT_ID }}
          VITE_FIREBASE_STORAGE_BUCKET: ${{ secrets.VITE_FIREBASE_STORAGE_BUCKET }}
          VITE_FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.VITE_FIREBASE_MESSAGING_SENDER_ID }}
          VITE_FIREBASE_APP_ID: ${{ secrets.VITE_FIREBASE_APP_ID }}
          VITE_FIREBASE_MEASUREMENT_ID: ${{ secrets.VITE_FIREBASE_MEASUREMENT_ID }}

  # Job 2: Deploy Web (Firebase Hosting)
  deploy-web:
    name: 🌐 Deploy Web
    runs-on: ubuntu-latest
    needs: quality-check
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: 📚 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🔍 Debug - Check secrets
        run: |
          echo "🔍 Verificando secrets..."
          echo "VITE_FIREBASE_API_KEY existe: ${{ secrets.VITE_FIREBASE_API_KEY != '' }}"
          echo "VITE_FIREBASE_AUTH_DOMAIN existe: ${{ secrets.VITE_FIREBASE_AUTH_DOMAIN != '' }}"
          echo "VITE_FIREBASE_PROJECT_ID existe: ${{ secrets.VITE_FIREBASE_PROJECT_ID != '' }}"
          echo "FIREBASE_SERVICE_ACCOUNT existe: ${{ secrets.FIREBASE_SERVICE_ACCOUNT != '' }}"

      - name: �🔢 Generate version info
        id: version
        run: |
          VERSION="v$(date +%Y.%m.%d)-${GITHUB_SHA::7}"
          BUILD_NUMBER="${GITHUB_RUN_NUMBER}"
          BUILD_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "BUILD_NUMBER=$BUILD_NUMBER" >> $GITHUB_OUTPUT
          echo "BUILD_DATE=$BUILD_DATE" >> $GITHUB_OUTPUT
          
          # Cria arquivo de versão
          mkdir -p src
          cat > src/version.json << EOF
          {
            "version": "$VERSION",
            "buildNumber": "$BUILD_NUMBER",
            "buildDate": "$BUILD_DATE",
            "gitSha": "${GITHUB_SHA}",
            "gitRef": "${GITHUB_REF}",
            "platform": "web"
          }
          EOF
          
          echo "✅ Version: $VERSION (Build #$BUILD_NUMBER)"

      - name: 🏗️ Build application
        run: pnpm run build
        env:
          VITE_FIREBASE_API_KEY: ${{ secrets.VITE_FIREBASE_API_KEY }}
          VITE_FIREBASE_AUTH_DOMAIN: ${{ secrets.VITE_FIREBASE_AUTH_DOMAIN }}
          VITE_FIREBASE_PROJECT_ID: ${{ secrets.VITE_FIREBASE_PROJECT_ID }}
          VITE_FIREBASE_STORAGE_BUCKET: ${{ secrets.VITE_FIREBASE_STORAGE_BUCKET }}
          VITE_FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.VITE_FIREBASE_MESSAGING_SENDER_ID }}
          VITE_FIREBASE_APP_ID: ${{ secrets.VITE_FIREBASE_APP_ID }}
          VITE_FIREBASE_MEASUREMENT_ID: ${{ secrets.VITE_FIREBASE_MEASUREMENT_ID }}
          VITE_APP_VERSION: ${{ steps.version.outputs.VERSION }}
          VITE_BUILD_NUMBER: ${{ steps.version.outputs.BUILD_NUMBER }}
          VITE_BUILD_DATE: ${{ steps.version.outputs.BUILD_DATE }}

      - name: � Verify Firebase config in build
        run: |
          echo "🔍 Verificando se as variáveis Firebase foram injetadas no build..."
          if grep -r "firebase.config.is.missing" dist/ 2>/dev/null; then
            echo "❌ ERRO: Mensagem de config missing encontrada no build"
            exit 1
          fi
          echo "✅ Build parece correto - configuração Firebase deve estar presente"

      - name: �🚀 Deploy to Firebase Hosting
        run: |
          npm install -g firebase-tools
          firebase deploy --only hosting --project autocare-platform --token "$FIREBASE_TOKEN"
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_SERVICE_ACCOUNT }}

      - name: 📝 Create deployment summary
        run: |
          echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Version:** ${{ steps.version.outputs.VERSION }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Build:** #${{ steps.version.outputs.BUILD_NUMBER }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Date:** ${{ steps.version.outputs.BUILD_DATE }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Platform:** Web (Firebase Hosting)" >> $GITHUB_STEP_SUMMARY
          echo "- **URL Principal:** https://app.garageminteligente.com.br" >> $GITHUB_STEP_SUMMARY
          echo "- **URL Firebase:** https://app-garageminteligente.web.app" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ Deploy concluído com sucesso!" >> $GITHUB_STEP_SUMMARY
