name: 🚀 Deploy Completo (Otimizado)

on:
  push:
    branches:
      - master
      - release/android
    tags:
      - "v*.*.*"
  workflow_dispatch:
    inputs:
      deploy_web:
        description: "Deploy Web (Firebase Hosting)"
        type: boolean
        default: true
      deploy_android:
        description: "Deploy Android (Play Store)"
        type: boolean
        default: true
      android_track:
        description: "Play Store Track"
        required: false
        default: "internal"
        type: choice
        options:
          - internal
          - alpha
          - beta
          - production

env:
  NODE_VERSION: "20"
  JAVA_VERSION: "21"

jobs:
  # Job 1: Setup e Build (compartilhado)
  build:
    name: 🏗️ Build Assets
    runs-on: ubuntu-latest

    outputs:
      version_code: ${{ steps.version.outputs.VERSION_CODE }}
      version_name: ${{ steps.version.outputs.VERSION_NAME }}

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"

      - name: 📚 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🔢 Generate version info
        id: version
        run: |
          VERSION_CODE="${GITHUB_RUN_NUMBER}"
          VERSION_NAME="$(date +%Y.%m.%d)-${GITHUB_SHA::7}"

          echo "VERSION_CODE=$VERSION_CODE" >> $GITHUB_OUTPUT
          echo "VERSION_NAME=$VERSION_NAME" >> $GITHUB_OUTPUT

          echo "📱 Version: $VERSION_NAME (#$VERSION_CODE)"

      - name: 📝 Generate Changelog
        run: |
          chmod +x ./scripts/generate-changelog.sh
          ./scripts/generate-changelog.sh "${{ steps.version.outputs.VERSION_NAME }}"

      - name: 💾 Create version.json
        run: |
          cat > src/version.json << EOF
          {
            "version": "${{ steps.version.outputs.VERSION_NAME }}",
            "buildNumber": "${{ steps.version.outputs.VERSION_CODE }}",
            "buildDate": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",
            "gitCommit": "${GITHUB_SHA}",
            "gitBranch": "${GITHUB_REF_NAME}"
          }
          EOF

      - name: 🔍 Type check
        run: pnpm run type-check

      - name: 🏗️ Build Web Assets
        run: pnpm build
        env:
          VITE_FIREBASE_API_KEY: ${{ secrets.VITE_FIREBASE_API_KEY }}
          VITE_FIREBASE_AUTH_DOMAIN: ${{ secrets.VITE_FIREBASE_AUTH_DOMAIN }}
          VITE_FIREBASE_PROJECT_ID: ${{ secrets.VITE_FIREBASE_PROJECT_ID }}
          VITE_FIREBASE_STORAGE_BUCKET: ${{ secrets.VITE_FIREBASE_STORAGE_BUCKET }}
          VITE_FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.VITE_FIREBASE_MESSAGING_SENDER_ID }}
          VITE_FIREBASE_APP_ID: ${{ secrets.VITE_FIREBASE_APP_ID }}
          VITE_FIREBASE_MEASUREMENT_ID: ${{ secrets.VITE_FIREBASE_MEASUREMENT_ID }}

      - name: 📦 Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: web-build
          path: dist/
          retention-days: 1

      - name: 📦 Upload Source for Android
        uses: actions/upload-artifact@v4
        with:
          name: source-code
          path: |
            src/
            public/
            capacitor.config.ts
            package.json
            pnpm-lock.yaml
          retention-days: 1

  # Job 2: Deploy Web (paralelo)
  deploy-web:
    name: 🌐 Deploy Web
    runs-on: ubuntu-latest
    needs: build
    if: |
      (github.event_name == 'push' && github.ref == 'refs/heads/master') ||
      (github.event_name == 'workflow_dispatch' && inputs.deploy_web == true)

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: web-build
          path: dist/

      - name: 🚀 Deploy to Firebase Hosting
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: ${{ secrets.GITHUB_TOKEN }}
          firebaseServiceAccount: ${{ secrets.FIREBASE_SERVICE_ACCOUNT }}
          channelId: live
          projectId: ${{ secrets.VITE_FIREBASE_PROJECT_ID }}

      - name: ✅ Deploy Summary
        run: |
          echo "## 🌐 Web Deploy Concluído!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Version:** ${{ needs.build.outputs.version_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **URL:** https://app-garageminteligente.web.app" >> $GITHUB_STEP_SUMMARY

  # Job 3: Build Android AAB (paralelo)
  build-android:
    name: 🤖 Build Android AAB
    runs-on: ubuntu-latest
    needs: build
    if: |
      (github.event_name == 'push') ||
      (github.event_name == 'workflow_dispatch' && inputs.deploy_android == true)

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"

      - name: ☕ Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: ${{ env.JAVA_VERSION }}

      - name: 📥 Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: web-build
          path: dist/

      - name: 📥 Download Source Code
        uses: actions/download-artifact@v4
        with:
          name: source-code

      - name: 📚 Install dependencies (for Capacitor)
        run: pnpm install --frozen-lockfile

      - name: 📲 Sync Capacitor
        run: npx cap sync android

      - name: 🔧 Configure Firebase
        run: |
          echo "Configurando Firebase..."
          if [ ! -f "android/app/google-services.json" ]; then
            echo "Criando google-services.json a partir do secret..."
            echo '${{ secrets.GOOGLE_SERVICES_JSON }}' > android/app/google-services.json
          fi

      - name: 🔐 Setup Keystore
        run: |
          echo "Configurando keystore..."
          echo '${{ secrets.ANDROID_KEYSTORE_BASE64 }}' | base64 -d > android/app/upload-keystore.jks

          cat > android/key.properties << EOF
          storePassword=${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
          keyPassword=${{ secrets.ANDROID_KEY_PASSWORD }}
          keyAlias=${{ secrets.ANDROID_KEY_ALIAS }}
          storeFile=app/upload-keystore.jks
          EOF

      - name: 📝 Update Version in build.gradle
        run: |
          VERSION_CODE="${{ needs.build.outputs.version_code }}"
          VERSION_NAME="${{ needs.build.outputs.version_name }}"

          sed -i "s/versionCode [0-9]*/versionCode $VERSION_CODE/" android/app/build.gradle
          sed -i "s/versionName \".*\"/versionName \"$VERSION_NAME\"/" android/app/build.gradle

          echo "✅ Updated build.gradle:"
          grep -E "versionCode|versionName" android/app/build.gradle

      - name: 🔨 Build AAB
        run: |
          cd android
          chmod +x ./gradlew
          ./gradlew bundleRelease --no-daemon --stacktrace

      - name: 📦 Upload AAB Artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-release-aab
          path: android/app/build/outputs/bundle/release/app-release.aab
          retention-days: 30

      - name: 📊 Build Summary
        run: |
          echo "## 🤖 Android Build Concluído!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Version Code:** ${{ needs.build.outputs.version_code }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Version Name:** ${{ needs.build.outputs.version_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit:** ${GITHUB_SHA::7}" >> $GITHUB_STEP_SUMMARY

  # Job 4: Deploy Android (depende do build-android)
  deploy-android:
    name: 🚀 Deploy to Play Store
    runs-on: ubuntu-latest
    needs: [build, build-android]
    if: |
      (github.event_name == 'push') ||
      (github.event_name == 'workflow_dispatch' && inputs.deploy_android == true)

    steps:
      - name: 📥 Download AAB
        uses: actions/download-artifact@v4
        with:
          name: app-release-aab

      - name: 🚀 Deploy to Play Store
        uses: r0adkll/upload-google-play@v1.1.3
        with:
          serviceAccountJsonPlainText: ${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT }}
          packageName: com.garageminteligente.app
          releaseFiles: app-release.aab
          track: ${{ github.event.inputs.android_track || 'internal' }}
          status: completed
          inAppUpdatePriority: 3
          whatsNewDirectory: android/whatsnew

      - name: ✅ Deploy Summary
        run: |
          TRACK="${{ github.event.inputs.android_track || 'internal' }}"
          echo "## 🚀 Android Deploy Concluído!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Track:** $TRACK" >> $GITHUB_STEP_SUMMARY
          echo "- **Package:** com.garageminteligente.app" >> $GITHUB_STEP_SUMMARY
          echo "- **Version:** ${{ needs.build.outputs.version_name }}" >> $GITHUB_STEP_SUMMARY
