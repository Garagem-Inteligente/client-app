name: 🤖 Deploy Android (Google Play)

on:
  push:
    branches:
      - release/android
      - master
    tags:
      - "v*.*.*"
  workflow_dispatch:
    inputs:
      track:
        description: "Play Store Track"
        required: true
        default: "internal"
        type: choice
        options:
          - internal
          - alpha
          - beta
          - production

env:
  NODE_VERSION: "20"
  JAVA_VERSION: "17"

jobs:
  # Job 1: Build AAB
  build-android:
    name: 🏗️ Build Android AAB
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Necessário para git log completo

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"

      - name: ☕ Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: ${{ env.JAVA_VERSION }}

      - name: 📚 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🔢 Generate version info
        id: version
        run: |
          VERSION_CODE="${GITHUB_RUN_NUMBER}"
          VERSION_NAME="$(date +%Y.%m.%d)-${GITHUB_SHA::7}"

          echo "VERSION_CODE=$VERSION_CODE" >> $GITHUB_OUTPUT
          echo "VERSION_NAME=$VERSION_NAME" >> $GITHUB_OUTPUT

          echo "📱 Version Code: $VERSION_CODE"
          echo "📱 Version Name: $VERSION_NAME"

      - name: 📝 Generate Changelog
        run: |
          chmod +x ./scripts/generate-changelog.sh
          ./scripts/generate-changelog.sh "${{ steps.version.outputs.VERSION_NAME }}"

      - name: 💾 Create version.json
        run: |
          cat > src/version.json << EOF
          {
            "version": "${{ steps.version.outputs.VERSION_NAME }}",
            "buildNumber": "${{ steps.version.outputs.VERSION_CODE }}",
            "buildDate": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",
            "gitCommit": "${GITHUB_SHA}",
            "gitBranch": "${GITHUB_REF_NAME}"
          }
          EOF

      - name: 🏗️ Build Web Assets
        run: pnpm build
        env:
          VITE_FIREBASE_API_KEY: ${{ secrets.VITE_FIREBASE_API_KEY }}
          VITE_FIREBASE_AUTH_DOMAIN: ${{ secrets.VITE_FIREBASE_AUTH_DOMAIN }}
          VITE_FIREBASE_PROJECT_ID: ${{ secrets.VITE_FIREBASE_PROJECT_ID }}
          VITE_FIREBASE_STORAGE_BUCKET: ${{ secrets.VITE_FIREBASE_STORAGE_BUCKET }}
          VITE_FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.VITE_FIREBASE_MESSAGING_SENDER_ID }}
          VITE_FIREBASE_APP_ID: ${{ secrets.VITE_FIREBASE_APP_ID }}
          VITE_FIREBASE_MEASUREMENT_ID: ${{ secrets.VITE_FIREBASE_MEASUREMENT_ID }}

      - name: 📲 Add Android Platform
        run: npx cap add android

      - name: 📲 Sync Capacitor
        run: npx cap sync android

      - name: 🔧 Configure Firebase
        run: |
          echo "Configurando Firebase..."
          # Verifica se o arquivo já existe no repositório
          if [ ! -f "android/app/google-services.json" ]; then
            echo "Criando google-services.json a partir do secret..."
            echo '${{ secrets.GOOGLE_SERVICES_JSON }}' > android/app/google-services.json
          else
            echo "google-services.json já existe no repositório"
          fi

      - name: 🔐 Setup Keystore
        run: |
          echo "Configurando keystore..."
          
          # Decode base64 do keystore (usando -w 0 para evitar quebras de linha)
          echo "${{ secrets.ANDROID_KEYSTORE_BASE64 }}" | base64 --decode > android/app/upload-keystore.jks
          
          # Valida que o arquivo foi criado corretamente
          if [ ! -f "android/app/upload-keystore.jks" ]; then
            echo "❌ Erro: Keystore não foi criado!"
            exit 1
          fi
          
          KEYSTORE_SIZE=$(stat -c%s android/app/upload-keystore.jks)
          echo "✅ Keystore criado: $KEYSTORE_SIZE bytes"
          
          # Cria key.properties
          cat > android/key.properties << EOF
          storePassword=${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
          keyPassword=${{ secrets.ANDROID_KEY_PASSWORD }}
          keyAlias=${{ secrets.ANDROID_KEY_ALIAS }}
          storeFile=upload-keystore.jks
          EOF

      - name: 📝 Update Version in build.gradle
        run: |
          VERSION_CODE="${{ steps.version.outputs.VERSION_CODE }}"
          VERSION_NAME="${{ steps.version.outputs.VERSION_NAME }}"

          sed -i "s/versionCode [0-9]*/versionCode $VERSION_CODE/" android/app/build.gradle
          sed -i "s/versionName \".*\"/versionName \"$VERSION_NAME\"/" android/app/build.gradle

          echo "✅ Updated build.gradle:"
          grep -E "versionCode|versionName" android/app/build.gradle

      - name: 🔨 Build AAB
        run: |
          cd android
          chmod +x ./gradlew
          ./gradlew bundleRelease --no-daemon --stacktrace

      - name: 📦 Upload AAB Artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-release-aab
          path: android/app/build/outputs/bundle/release/app-release.aab
          retention-days: 30

      - name: 📊 Build Summary
        run: |
          echo "## 🎉 Build Concluído!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Version Code:** ${{ steps.version.outputs.VERSION_CODE }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Version Name:** ${{ steps.version.outputs.VERSION_NAME }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit:** ${GITHUB_SHA::7}" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch:** ${GITHUB_REF_NAME}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📦 AAB gerado e pronto para deploy!" >> $GITHUB_STEP_SUMMARY

  # Job 2: Deploy to Google Play
  deploy-play-store:
    name: 🚀 Deploy to Google Play
    runs-on: ubuntu-latest
    needs: build-android
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'

    steps:
      - name: 📥 Download AAB
        uses: actions/download-artifact@v4
        with:
          name: app-release-aab

      - name: 🚀 Deploy to Play Store
        uses: r0adkll/upload-google-play@v1.1.3
        with:
          serviceAccountJsonPlainText: ${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT }}
          packageName: com.garageminteligente.app
          releaseFiles: app-release.aab
          track: ${{ github.event.inputs.track || 'internal' }}
          status: completed
          inAppUpdatePriority: 3
          whatsNewDirectory: android/whatsnew

      - name: ✅ Deploy Summary
        run: |
          TRACK="${{ github.event.inputs.track || 'internal' }}"
          echo "## 🎉 Deploy Concluído!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Track:** $TRACK" >> $GITHUB_STEP_SUMMARY
          echo "- **Package:** com.garageminteligente.app" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ App disponível no Google Play ($TRACK)!" >> $GITHUB_STEP_SUMMARY
