<template>
  <ion-page>
    <ion-header>
      <ion-toolbar>
        <ion-buttons slot="start">
          <ion-back-button default-href="/tabs/home"></ion-back-button>
        </ion-buttons>
        <ion-title>Manutenções</ion-title>
        <ion-buttons slot="end">
          <ion-button @click="showAddForm = true">
            <ion-icon :icon="add"></ion-icon>
          </ion-button>
        </ion-buttons>
      </ion-toolbar>
    </ion-header>

    <ion-content :fullscreen="true">
      <!-- Stats Cards -->
      <div class="stats-container">
        <ion-card class="stat-card">
          <ion-card-content>
            <div class="stat-header">
              <span class="stat-label">Total</span>
              <ion-icon :icon="construct" class="stat-icon primary"></ion-icon>
            </div>
            <div class="stat-value">{{ vehiclesStore.totalMaintenanceRecords }}</div>
            <div class="stat-footer">Registros</div>
          </ion-card-content>
        </ion-card>

        <ion-card class="stat-card">
          <ion-card-content>
            <div class="stat-header">
              <span class="stat-label">Custo Total</span>
              <ion-icon :icon="cash" class="stat-icon success"></ion-icon>
            </div>
            <div class="stat-value">{{ formatCurrency(vehiclesStore.totalMaintenanceCost) }}</div>
            <div class="stat-footer">Investido</div>
          </ion-card-content>
        </ion-card>

        <ion-card class="stat-card">
          <ion-card-content>
            <div class="stat-header">
              <span class="stat-label">Próximas</span>
              <ion-icon :icon="calendar" class="stat-icon warning"></ion-icon>
            </div>
            <div class="stat-value">{{ vehiclesStore.upcomingMaintenance.length }}</div>
            <div class="stat-footer">Agendadas</div>
          </ion-card-content>
        </ion-card>

        <ion-card class="stat-card" v-if="vehiclesStore.overdueMaintenance.length > 0">
          <ion-card-content>
            <div class="stat-header">
              <span class="stat-label">Atrasadas</span>
              <ion-icon :icon="alertCircle" class="stat-icon danger"></ion-icon>
            </div>
            <div class="stat-value">{{ vehiclesStore.overdueMaintenance.length }}</div>
            <div class="stat-footer">Requerem atenção</div>
          </ion-card-content>
        </ion-card>
      </div>

      <!-- Filter Chips -->
      <div class="filter-chips">
        <ion-chip :class="{ 'chip-selected': selectedFilter === 'all' }" @click="selectedFilter = 'all'">
          <ion-label>Todas</ion-label>
        </ion-chip>
        <ion-chip :class="{ 'chip-selected': selectedFilter === 'recent' }" @click="selectedFilter = 'recent'">
          <ion-label>Recentes</ion-label>
        </ion-chip>
        <ion-chip :class="{ 'chip-selected': selectedFilter === 'upcoming' }" @click="selectedFilter = 'upcoming'">
          <ion-label>Próximas</ion-label>
        </ion-chip>
        <ion-chip :class="{ 'chip-selected': selectedFilter === 'overdue' }" @click="selectedFilter = 'overdue'" v-if="vehiclesStore.overdueMaintenance.length > 0">
          <ion-label>Atrasadas</ion-label>
        </ion-chip>
      </div>

      <!-- Maintenance List -->
      <div class="maintenance-list">
        <ion-card v-for="record in filteredMaintenanceRecords" :key="record.id" class="maintenance-card">
          <ion-card-header>
            <div class="maintenance-header">
              <div>
                <ion-card-title class="maintenance-title">
                  {{ MAINTENANCE_TYPE_LABELS[record.type] }}
                </ion-card-title>
                <ion-card-subtitle>
                  {{ getVehicleName(record.vehicleId) }}
                </ion-card-subtitle>
              </div>
              <ion-chip :color="getStatusColor(record)">
                <ion-label>{{ getStatusLabel(record) }}</ion-label>
              </ion-chip>
            </div>
          </ion-card-header>

          <ion-card-content>
            <div class="maintenance-info">
              <div class="info-row">
                <ion-icon :icon="calendar" class="info-icon"></ion-icon>
                <span>{{ formatDate(record.date) }}</span>
              </div>
              <div class="info-row">
                <ion-icon :icon="speedometer" class="info-icon"></ion-icon>
                <span>{{ record.mileage.toLocaleString('pt-BR') }} km</span>
              </div>
              <div class="info-row">
                <ion-icon :icon="cash" class="info-icon"></ion-icon>
                <span>{{ formatCurrency(record.cost) }}</span>
              </div>
              <div class="info-row" v-if="record.serviceProvider">
                <ion-icon :icon="business" class="info-icon"></ion-icon>
                <span>{{ record.serviceProvider }}</span>
              </div>
            </div>

            <div v-if="record.description" class="maintenance-description">
              {{ record.description }}
            </div>

            <div class="maintenance-actions">
              <ion-button fill="clear" size="small" @click="viewDetails(record)">
                <ion-icon slot="start" :icon="eye"></ion-icon>
                Detalhes
              </ion-button>
              <ion-button fill="clear" size="small" color="danger" @click="confirmDelete(record)">
                <ion-icon slot="start" :icon="trash"></ion-icon>
                Excluir
              </ion-button>
            </div>
          </ion-card-content>
        </ion-card>

        <!-- Empty State -->
        <div v-if="filteredMaintenanceRecords.length === 0" class="empty-state">
          <ion-icon :icon="construct" class="empty-icon"></ion-icon>
          <h3>Nenhuma manutenção encontrada</h3>
          <p>{{ emptyStateMessage }}</p>
          <ion-button @click="showAddForm = true">Registrar Manutenção</ion-button>
        </div>
      </div>

      <!-- Add/Edit Modal -->
      <ion-modal :is-open="showAddForm" @did-dismiss="closeForm">
        <ion-header>
          <ion-toolbar>
            <ion-buttons slot="start">
              <ion-button @click="closeForm">Cancelar</ion-button>
            </ion-buttons>
            <ion-title>{{ editingRecordId ? 'Editar' : 'Nova' }} Manutenção</ion-title>
            <ion-buttons slot="end">
              <ion-button @click="handleSubmit" :disabled="!isFormValid" strong>Salvar</ion-button>
            </ion-buttons>
          </ion-toolbar>
        </ion-header>
        <ion-content>
          <div class="form-container">
            <!-- Vehicle Selection -->
            <ion-item>
              <ion-label position="stacked">Veículo *</ion-label>
              <ion-select v-model="formData.vehicleId" placeholder="Selecione o veículo">
                <ion-select-option v-for="vehicle in vehiclesStore.vehicles" :key="vehicle.id" :value="vehicle.id">
                  {{ vehicle.make }} {{ vehicle.model }} - {{ vehicle.plate }}
                </ion-select-option>
              </ion-select>
            </ion-item>

            <!-- Type Selection -->
            <ion-item>
              <ion-label position="stacked">Tipo de Manutenção *</ion-label>
              <ion-select v-model="formData.type" placeholder="Selecione o tipo">
                <ion-select-option v-for="option in flatMaintenanceOptions" :key="option.value" :value="option.value">
                  {{ option.emoji }} {{ option.label }}
                </ion-select-option>
              </ion-select>
            </ion-item>

            <!-- Description -->
            <ion-item>
              <ion-label position="stacked">Descrição</ion-label>
              <ion-textarea v-model="formData.description" placeholder="Ex: Troca de óleo sintético" :rows="3"></ion-textarea>
            </ion-item>

            <!-- Date -->
            <ion-item>
              <ion-label position="stacked">Data *</ion-label>
              <ion-datetime-button datetime="maintenance-date"></ion-datetime-button>
            </ion-item>
            <ion-modal :keep-contents-mounted="true">
              <ion-datetime id="maintenance-date" v-model="formData.date" presentation="date" :max="maxDate as string"></ion-datetime>
            </ion-modal>

            <!-- Mileage -->
            <ion-item>
              <ion-label position="stacked">Quilometragem *</ion-label>
              <ion-input v-model.number="formData.mileage" type="number" placeholder="Ex: 50000"></ion-input>
            </ion-item>

            <!-- Parts Cost -->
            <ion-item>
              <ion-label position="stacked">Custo das Peças (R$)</ion-label>
              <ion-input v-model.number="formData.partsCost" type="number" step="0.01" placeholder="0,00"></ion-input>
            </ion-item>

            <!-- Labor Cost -->
            <ion-item>
              <ion-label position="stacked">Custo da Mão de Obra (R$)</ion-label>
              <ion-input v-model.number="formData.laborCost" type="number" step="0.01" placeholder="0,00"></ion-input>
            </ion-item>

            <!-- Total Cost (Calculated) -->
            <ion-item>
              <ion-label position="stacked">Custo Total</ion-label>
              <ion-input :value="formatCurrency(totalCost)" readonly></ion-input>
            </ion-item>

            <!-- Service Provider -->
            <ion-item>
              <ion-label position="stacked">Prestador de Serviço</ion-label>
              <ion-input v-model="formData.serviceProvider" placeholder="Ex: Oficina do João"></ion-input>
            </ion-item>

            <!-- Next Due Date -->
            <ion-item>
              <ion-label position="stacked">Próxima Manutenção (Data)</ion-label>
              <ion-datetime-button datetime="next-due-date"></ion-datetime-button>
            </ion-item>
            <ion-modal :keep-contents-mounted="true">
              <ion-datetime id="next-due-date" v-model="formData.nextDueDate" presentation="date" :min="formData.date as string"></ion-datetime>
            </ion-modal>

            <!-- Next Due Mileage -->
            <ion-item>
              <ion-label position="stacked">Próxima Manutenção (KM)</ion-label>
              <ion-input v-model.number="formData.nextDueMileage" type="number" placeholder="Ex: 60000"></ion-input>
            </ion-item>

            <!-- Notes -->
            <ion-item>
              <ion-label position="stacked">Observações</ion-label>
              <ion-textarea v-model="formData.notes" placeholder="Anotações adicionais" :rows="4"></ion-textarea>
            </ion-item>

            <!-- Photos Section -->
            <div class="photos-section">
              <h3>Fotos da Manutenção</h3>
              <ion-button expand="block" fill="outline" @click="takePicture('before')">
                <ion-icon slot="start" :icon="camera"></ion-icon>
                Foto Antes
              </ion-button>
              <img v-if="formData.beforePhoto" :src="formData.beforePhoto" class="photo-preview" />

              <ion-button expand="block" fill="outline" @click="takePicture('after')">
                <ion-icon slot="start" :icon="camera"></ion-icon>
                Foto Depois
              </ion-button>
              <img v-if="formData.afterPhoto" :src="formData.afterPhoto" class="photo-preview" />
            </div>
          </div>
        </ion-content>
      </ion-modal>

      <!-- Delete Confirmation Alert -->
      <ion-alert
        :is-open="showDeleteAlert"
        @did-dismiss="showDeleteAlert = false"
        header="Excluir Manutenção"
        message="Tem certeza que deseja excluir esta manutenção? Esta ação não pode ser desfeita."
        :buttons="deleteAlertButtons"
      ></ion-alert>
    </ion-content>
  </ion-page>
</template>

<script setup lang="ts">
import { ref, computed, onMounted } from 'vue'
import {
  IonPage,
  IonHeader,
  IonToolbar,
  IonTitle,
  IonContent,
  IonButtons,
  IonButton,
  IonBackButton,
  IonIcon,
  IonCard,
  IonCardContent,
  IonCardHeader,
  IonCardTitle,
  IonCardSubtitle,
  IonChip,
  IonLabel,
  IonModal,
  IonItem,
  IonSelect,
  IonSelectOption,
  IonTextarea,
  IonInput,
  IonDatetime,
  IonDatetimeButton,
  IonAlert
} from '@ionic/vue'
import {
  add,
  construct,
  cash,
  calendar,
  alertCircle,
  speedometer,
  business,
  eye,
  trash,
  camera
} from 'ionicons/icons'
import { Camera, CameraResultType, CameraSource } from '@capacitor/camera'
import { useVehiclesStore } from '@/stores/vehicles'
import type { MaintenanceRecord, MaintenanceType } from '@/stores/vehicles'
import { MAINTENANCE_TYPE_OPTIONS, MAINTENANCE_TYPE_LABELS } from '@/constants/vehicles'

const vehiclesStore = useVehiclesStore()

const showAddForm = ref(false)
const editingRecordId = ref<string | null>(null)
const selectedFilter = ref<string>('all')
const showDeleteAlert = ref(false)
const maintenanceToDelete = ref<MaintenanceRecord | null>(null)

const maxDate = new Date().toISOString()

// Flatten maintenance type options
const flatMaintenanceOptions = computed(() => {
  return MAINTENANCE_TYPE_OPTIONS.flatMap(category => category.options)
})

const formData = ref({
  vehicleId: '',
  type: 'oil_change' as MaintenanceType,
  description: '',
  cost: 0,
  partsCost: 0,
  laborCost: 0,
  mileage: 0,
  date: new Date().toISOString(),
  nextDueDate: '',
  nextDueMileage: 0,
  serviceProvider: '',
  notes: '',
  beforePhoto: '',
  afterPhoto: ''
})

const totalCost = computed(() => {
  return (formData.value.partsCost || 0) + (formData.value.laborCost || 0)
})

const isFormValid = computed(() => {
  return (
    formData.value.vehicleId &&
    formData.value.type &&
    formData.value.date &&
    formData.value.mileage > 0
  )
})

const filteredMaintenanceRecords = computed(() => {
  const records = vehiclesStore.maintenanceRecords
  
  switch (selectedFilter.value) {
    case 'recent':
      return vehiclesStore.recentMaintenance
    case 'upcoming':
      return vehiclesStore.upcomingMaintenance
    case 'overdue':
      return vehiclesStore.overdueMaintenance
    default:
      return records
  }
})

const emptyStateMessage = computed(() => {
  switch (selectedFilter.value) {
    case 'recent':
      return 'Nenhuma manutenção recente'
    case 'upcoming':
      return 'Nenhuma manutenção agendada'
    case 'overdue':
      return 'Nenhuma manutenção atrasada'
    default:
      return 'Comece registrando a primeira manutenção'
  }
})

const getVehicleName = (vehicleId: string) => {
  const vehicle = vehiclesStore.getVehicleById(vehicleId)
  return vehicle ? `${vehicle.make} ${vehicle.model} - ${vehicle.plate}` : 'Veículo não encontrado'
}

const getStatusColor = (record: MaintenanceRecord): string => {
  if (!record.nextDueDate) return 'medium'
  
  const now = new Date()
  if (record.nextDueDate < now) return 'danger'
  
  const daysUntil = Math.ceil((record.nextDueDate.getTime() - now.getTime()) / (1000 * 60 * 60 * 24))
  if (daysUntil <= 7) return 'warning'
  if (daysUntil <= 30) return 'primary'
  
  return 'success'
}

const getStatusLabel = (record: MaintenanceRecord): string => {
  if (!record.nextDueDate) return 'Concluída'
  
  const now = new Date()
  if (record.nextDueDate < now) return 'Atrasada'
  
  const daysUntil = Math.ceil((record.nextDueDate.getTime() - now.getTime()) / (1000 * 60 * 60 * 24))
  if (daysUntil <= 7) return `${daysUntil} dias`
  if (daysUntil <= 30) return `${daysUntil} dias`
  
  return 'Agendada'
}

const formatDate = (date: Date) => {
  return new Intl.DateTimeFormat('pt-BR', {
    day: '2-digit',
    month: '2-digit',
    year: 'numeric'
  }).format(date)
}

const formatCurrency = (value: number) => {
  return new Intl.NumberFormat('pt-BR', {
    style: 'currency',
    currency: 'BRL'
  }).format(value)
}

const takePicture = async (type: 'before' | 'after') => {
  try {
    const image = await Camera.getPhoto({
      quality: 80,
      allowEditing: false,
      resultType: CameraResultType.DataUrl,
      source: CameraSource.Prompt
    })

    if (image.dataUrl) {
      if (type === 'before') {
        formData.value.beforePhoto = image.dataUrl
      } else {
        formData.value.afterPhoto = image.dataUrl
      }
    }
  } catch (error) {
    console.error('Error taking picture:', error)
  }
}

const handleSubmit = async () => {
  if (!isFormValid.value) return

  const recordData = {
    vehicleId: formData.value.vehicleId,
    type: formData.value.type,
    description: formData.value.description,
    cost: totalCost.value,
    partsCost: formData.value.partsCost,
    laborCost: formData.value.laborCost,
    mileage: formData.value.mileage,
    date: new Date(formData.value.date),
    nextDueDate: formData.value.nextDueDate ? new Date(formData.value.nextDueDate) : undefined,
    nextDueMileage: formData.value.nextDueMileage || undefined,
    serviceProvider: formData.value.serviceProvider,
    notes: formData.value.notes,
    beforePhoto: formData.value.beforePhoto,
    afterPhoto: formData.value.afterPhoto
  }

  const success = await vehiclesStore.addMaintenanceRecord(recordData)
  
  if (success) {
    closeForm()
  }
}

const viewDetails = (record: MaintenanceRecord) => {
  // TODO: Implementar página de detalhes da manutenção
  console.log('View details:', record)
}

const confirmDelete = (record: MaintenanceRecord) => {
  maintenanceToDelete.value = record
  showDeleteAlert.value = true
}

const handleDelete = async () => {
  if (!maintenanceToDelete.value) return
  
  const success = await vehiclesStore.deleteMaintenanceRecord(maintenanceToDelete.value.id)
  
  if (success) {
    maintenanceToDelete.value = null
  }
}

const deleteAlertButtons = [
  {
    text: 'Cancelar',
    role: 'cancel'
  },
  {
    text: 'Excluir',
    role: 'destructive',
    handler: handleDelete
  }
]

const closeForm = () => {
  showAddForm.value = false
  editingRecordId.value = null
  formData.value = {
    vehicleId: '',
    type: 'oil_change',
    description: '',
    cost: 0,
    partsCost: 0,
    laborCost: 0,
    mileage: 0,
    date: new Date().toISOString(),
    nextDueDate: '',
    nextDueMileage: 0,
    serviceProvider: '',
    notes: '',
    beforePhoto: '',
    afterPhoto: ''
  }
}

onMounted(async () => {
  await vehiclesStore.fetchVehicles()
  await vehiclesStore.fetchMaintenanceRecords()
})
</script>

<style scoped>
.stats-container {
  display: grid;
  grid-template-columns: repeat(2, 1fr);
  gap: 12px;
  padding: 16px;
}

@media (min-width: 768px) {
  .stats-container {
    grid-template-columns: repeat(4, 1fr);
  }
}

.stat-card {
  margin: 0;
}

.stat-card ion-card-content {
  padding: 16px;
}

.stat-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 8px;
}

.stat-label {
  font-size: 0.875rem;
  color: var(--ion-color-medium);
}

.stat-icon {
  font-size: 1.5rem;
}

.stat-icon.primary {
  color: var(--ion-color-primary);
}

.stat-icon.success {
  color: var(--ion-color-success);
}

.stat-icon.warning {
  color: var(--ion-color-warning);
}

.stat-icon.danger {
  color: var(--ion-color-danger);
}

.stat-value {
  font-size: 1.75rem;
  font-weight: bold;
  margin-bottom: 4px;
}

.stat-footer {
  font-size: 0.75rem;
  color: var(--ion-color-medium);
}

.filter-chips {
  display: flex;
  gap: 8px;
  padding: 0 16px 16px;
  overflow-x: auto;
}

.chip-selected {
  --background: var(--ion-color-primary);
  --color: white;
}

.maintenance-list {
  padding: 0 16px 16px;
}

.maintenance-card {
  margin-bottom: 16px;
}

.maintenance-header {
  display: flex;
  justify-content: space-between;
  align-items: flex-start;
}

.maintenance-title {
  font-size: 1.125rem;
  margin-bottom: 4px;
}

.maintenance-info {
  display: grid;
  grid-template-columns: repeat(2, 1fr);
  gap: 12px;
  margin-bottom: 12px;
}

.info-row {
  display: flex;
  align-items: center;
  gap: 8px;
  font-size: 0.875rem;
}

.info-icon {
  font-size: 1.25rem;
  color: var(--ion-color-medium);
}

.maintenance-description {
  margin-bottom: 12px;
  padding: 12px;
  background: var(--ion-color-light);
  border-radius: 8px;
  font-size: 0.875rem;
}

.maintenance-actions {
  display: flex;
  gap: 8px;
  justify-content: flex-end;
  padding-top: 12px;
  border-top: 1px solid var(--ion-color-light);
}

.empty-state {
  text-align: center;
  padding: 48px 16px;
}

.empty-icon {
  font-size: 64px;
  color: var(--ion-color-medium);
  margin-bottom: 16px;
}

.empty-state h3 {
  margin-bottom: 8px;
}

.empty-state p {
  color: var(--ion-color-medium);
  margin-bottom: 24px;
}

.form-container {
  padding: 16px;
}

.photos-section {
  margin-top: 24px;
  padding: 16px;
  background: var(--ion-color-light);
  border-radius: 8px;
}

.photos-section h3 {
  margin-bottom: 16px;
}

.photo-preview {
  width: 100%;
  max-height: 300px;
  object-fit: contain;
  margin: 12px 0;
  border-radius: 8px;
}
</style>

