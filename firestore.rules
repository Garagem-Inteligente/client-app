rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isValidEmail(email) {
      return email.matches('^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$');
    }
    
    function isValidPlate(plate) {
      // Formato brasileiro: ABC-1234 ou ABC1D23 (Mercosul)
      return plate.matches('^[A-Z]{3}-?[0-9]{1}[A-Z0-9]{1}[0-9]{2}$');
    }
    
    // Users collection
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && 
                      request.auth.uid == userId &&
                      request.resource.data.email is string &&
                      isValidEmail(request.resource.data.email) &&
                      request.resource.data.name is string &&
                      request.resource.data.name.size() > 0 &&
                      request.resource.data.userType in ['user', 'workshop'];
      allow update: if isOwner(userId) &&
                      request.resource.data.email is string &&
                      isValidEmail(request.resource.data.email) &&
                      request.resource.data.name is string &&
                      request.resource.data.name.size() > 0;
      allow delete: if isOwner(userId);
    }
    
    // Vehicles collection
    match /vehicles/{vehicleId} {
      // Allow read (list + get) for authenticated users
      // Security is enforced by the client-side query filtering by userId
      allow read: if isAuthenticated();
      
      allow create: if isAuthenticated() && 
                      request.resource.data.userId == request.auth.uid &&
                      // Required fields validation
                      request.resource.data.make is string &&
                      request.resource.data.make.size() > 0 &&
                      request.resource.data.model is string &&
                      request.resource.data.model.size() > 0 &&
                      request.resource.data.year is int &&
                      request.resource.data.year >= 1900 &&
                      request.resource.data.year <= 2030 &&
                      request.resource.data.plate is string &&
                      isValidPlate(request.resource.data.plate.upper()) &&
                      request.resource.data.vehicleType in ['car', 'motorcycle', 'van', 'truck', 'bus', 'pickup'] &&
                      request.resource.data.fuelType in ['flex', 'gasoline', 'ethanol', 'diesel', 'electric', 'hybrid-plugin', 'hybrid-mild', 'gnv'] &&
                      // Mileage validation
                      request.resource.data.mileage is int &&
                      request.resource.data.mileage >= 0 &&
                      request.resource.data.mileage <= 10000000;
      
      allow update: if isAuthenticated() && 
                      resource.data.userId == request.auth.uid &&
                      request.resource.data.userId == request.auth.uid &&
                      // Same validation as create
                      request.resource.data.make is string &&
                      request.resource.data.make.size() > 0 &&
                      request.resource.data.model is string &&
                      request.resource.data.model.size() > 0 &&
                      request.resource.data.year is int &&
                      request.resource.data.year >= 1900 &&
                      request.resource.data.year <= 2030 &&
                      request.resource.data.plate is string &&
                      isValidPlate(request.resource.data.plate.upper()) &&
                      request.resource.data.mileage is int &&
                      request.resource.data.mileage >= 0 &&
                      request.resource.data.mileage <= 10000000;
      
      allow delete: if isAuthenticated() && 
                      resource.data.userId == request.auth.uid;
    }
    
    // Maintenance collection
    match /maintenance/{maintenanceId} {
      // Allow read (list + get) for authenticated users
      // Security is enforced by the client-side query filtering by userId
      allow read: if isAuthenticated();
      
      allow create: if isAuthenticated() && 
                      request.resource.data.userId == request.auth.uid &&
                      // Required fields validation (apenas os essenciais)
                      request.resource.data.vehicleId is string &&
                      request.resource.data.vehicleId.size() > 0 &&
                      request.resource.data.type in [
                        'oil_change', 'oil_filter', 'air_filter', 'fuel_filter', 'cabin_filter',
                        'tire_rotation', 'tire_replacement', 'wheel_alignment', 'wheel_balancing',
                        'brake_pads', 'brake_discs', 'brake_fluid', 'battery', 'spark_plugs',
                        'timing_belt', 'serpentine_belt', 'coolant', 'transmission_fluid',
                        'power_steering_fluid', 'windshield_wipers', 'air_conditioning',
                        'suspension', 'exhaust_system', 'general_inspection', 'other'
                      ] &&
                      request.resource.data.description is string &&
                      request.resource.data.description.size() > 0 &&
                      // Cost validation (se presente)
                      (!('cost' in request.resource.data) || (
                        request.resource.data.cost is number &&
                        request.resource.data.cost >= 0 &&
                        request.resource.data.cost <= 1000000
                      )) &&
                      // Mileage validation (se presente)
                      (!('mileage' in request.resource.data) || (
                        request.resource.data.mileage is int &&
                        request.resource.data.mileage >= 0 &&
                        request.resource.data.mileage <= 10000000
                      )) &&
                      // Date validation (se presente)
                      (!('date' in request.resource.data) || request.resource.data.date is timestamp);
      
      allow update: if isAuthenticated() && 
                      resource.data.userId == request.auth.uid &&
                      request.resource.data.userId == request.auth.uid &&
                      // Same validation as create (campos opcionais)
                      request.resource.data.vehicleId is string &&
                      request.resource.data.vehicleId.size() > 0 &&
                      request.resource.data.type in [
                        'oil_change', 'oil_filter', 'air_filter', 'fuel_filter', 'cabin_filter',
                        'tire_rotation', 'tire_replacement', 'wheel_alignment', 'wheel_balancing',
                        'brake_pads', 'brake_discs', 'brake_fluid', 'battery', 'spark_plugs',
                        'timing_belt', 'serpentine_belt', 'coolant', 'transmission_fluid',
                        'power_steering_fluid', 'windshield_wipers', 'air_conditioning',
                        'suspension', 'exhaust_system', 'general_inspection', 'other'
                      ] &&
                      request.resource.data.description is string &&
                      request.resource.data.description.size() > 0 &&
                      (!('cost' in request.resource.data) || (
                        request.resource.data.cost is number &&
                        request.resource.data.cost >= 0 &&
                        request.resource.data.cost <= 1000000
                      )) &&
                      (!('mileage' in request.resource.data) || (
                        request.resource.data.mileage is int &&
                        request.resource.data.mileage >= 0 &&
                        request.resource.data.mileage <= 10000000
                      ));
      
      allow delete: if isAuthenticated() && 
                      resource.data.userId == request.auth.uid;
    }
    
    // Transfers collection
    match /transfers/{transferId} {
      // Users can create transfers for their own vehicles
      allow create: if isAuthenticated() && 
                      request.resource.data.fromUserId == request.auth.uid &&
                      request.resource.data.vehicleId is string &&
                      request.resource.data.vehicleId.size() > 0 &&
                      request.resource.data.toEmail is string &&
                      isValidEmail(request.resource.data.toEmail) &&
                      request.resource.data.fromConfirmationCode is string &&
                      request.resource.data.fromConfirmationCode.size() == 6 &&
                      request.resource.data.toConfirmationCode is string &&
                      request.resource.data.toConfirmationCode.size() == 6 &&
                      request.resource.data.fromConfirmed == false &&
                      request.resource.data.toConfirmed == false &&
                      request.resource.data.status == 'pending';
      
      // Users can read transfers where they are sender or receiver
      allow read: if isAuthenticated() && 
                    (resource.data.fromUserId == request.auth.uid ||
                     resource.data.toEmail == request.auth.token.email ||
                     (resource.data.toUserId is string && resource.data.toUserId == request.auth.uid));
      
      // Only Cloud Functions can update transfers (prevents client-side manipulation)
      // This ensures security as confirmation codes are checked server-side
      allow update: if false;
      
      // Sender can delete/cancel pending transfers
      allow delete: if isAuthenticated() && 
                      resource.data.fromUserId == request.auth.uid &&
                      resource.data.status == 'pending';
    }
    
    // Transferred Vehicles collection (historical record)
    match /transferredVehicles/{docId} {
      // Only Cloud Functions can create (created during transfer completion)
      allow create: if false;
      
      // Users can read their own transferred vehicles (previous owners)
      allow read: if isAuthenticated() && 
                    resource.data.userId == request.auth.uid;
      
      // No updates or deletes allowed (historical record is immutable)
      allow update, delete: if false;
    }
    
    // Default deny all other collections
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
