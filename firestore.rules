rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Função auxiliar para verificar autenticação
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Regras para a coleção de usuários
    match /users/{userId} {
      // Permitir leitura apenas do próprio perfil
      allow read: if isAuthenticated() && request.auth.uid == userId;
      
      // Permitir criação apenas do próprio perfil durante registro
      allow create: if isAuthenticated() && 
                       request.auth.uid == userId &&
                       request.resource.data.keys().hasAll(['email', 'name', 'userType', 'createdAt', 'updatedAt']) &&
                       request.resource.data.userType in ['user', 'workshop'];
      
      // Permitir atualização apenas do próprio perfil
      allow update: if isAuthenticated() && 
                       request.auth.uid == userId &&
                       request.resource.data.userType == resource.data.userType; // Impedir mudança de tipo
      
      // Impedir exclusão de perfis
      allow delete: if false;
    }
    
    // Regras para a coleção de veículos
    match /vehicles/{vehicleId} {
      // Permitir leitura apenas dos próprios veículos
      allow read: if isAuthenticated() && resource.data.userId == request.auth.uid;
      
      // Permitir criação apenas se o userId corresponde ao usuário autenticado
      allow create: if isAuthenticated() && 
                       request.resource.data.userId == request.auth.uid &&
                       request.resource.data.keys().hasAll(['make', 'model', 'year', 'plate', 'mileage', 'fuelType', 'userId', 'createdAt', 'updatedAt']);
      
      // Permitir atualização apenas do próprio veículo
      allow update: if isAuthenticated() && 
                       resource.data.userId == request.auth.uid &&
                       request.resource.data.userId == request.auth.uid;
      
      // Permitir exclusão apenas do próprio veículo
      allow delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
    }
    
    // Regras para a coleção de manutenções
    match /maintenance/{maintenanceId} {
      // Função para verificar se o veículo pertence ao usuário
      function vehicleBelongsToUser(vehicleId) {
        return isAuthenticated() && 
               exists(/databases/$(database)/documents/vehicles/$(vehicleId)) &&
               get(/databases/$(database)/documents/vehicles/$(vehicleId)).data.userId == request.auth.uid;
      }
      
      // Função para validar campos obrigatórios na criação
      function hasRequiredFields() {
        let newData = request.resource.data;
        return newData.keys().hasAll(['vehicleId', 'type', 'description', 'cost', 'mileage', 'date', 'createdAt']);
      }
      
      // Permitir leitura se o veículo pertence ao usuário
      allow read: if vehicleBelongsToUser(resource.data.vehicleId);
      
      // Permitir criação se o veículo pertence ao usuário e tem campos obrigatórios
      // Campos opcionais: nextDueDate, nextDueMileage, serviceProvider, notes
      allow create: if isAuthenticated() && 
                       vehicleBelongsToUser(request.resource.data.vehicleId) &&
                       hasRequiredFields();
      
      // Permitir atualização se o veículo pertence ao usuário
      allow update: if isAuthenticated() && 
                       vehicleBelongsToUser(resource.data.vehicleId) &&
                       request.resource.data.vehicleId == resource.data.vehicleId;
      
      // Permitir exclusão se o veículo pertence ao usuário
      allow delete: if vehicleBelongsToUser(resource.data.vehicleId);
    }
    
    // Regras para a coleção de transferências de veículos
    match /vehicle_transfers/{transferId} {
      // Permitir leitura se é o dono atual ou o novo dono
      allow read: if isAuthenticated() && 
                     (resource.data.currentOwnerEmail == request.auth.token.email ||
                      resource.data.newOwnerEmail == request.auth.token.email);
      
      // Permitir criação se o usuário é autenticado e é o dono atual
      allow create: if isAuthenticated() && 
                       request.resource.data.currentOwnerEmail == request.auth.token.email &&
                       request.resource.data.keys().hasAll(['vehicleId', 'currentOwnerId', 'currentOwnerEmail', 'newOwnerEmail', 'currentOwnerCode', 'newOwnerCode', 'currentOwnerConfirmed', 'newOwnerConfirmed', 'status', 'createdAt', 'expiresAt']);
      
      // Permitir atualização se é o dono atual ou o novo dono
      allow update: if isAuthenticated() && 
                       (resource.data.currentOwnerEmail == request.auth.token.email ||
                        resource.data.newOwnerEmail == request.auth.token.email);
      
      // Permitir exclusão apenas pelo dono atual
      allow delete: if isAuthenticated() && 
                       resource.data.currentOwnerEmail == request.auth.token.email;
    }
    
    // Função auxiliar para verificar se é dono da oficina
    function isWorkshopOwner(workshopId) {
      return isAuthenticated() && 
             get(/databases/$(database)/documents/workshops/$(workshopId)).data.ownerId == request.auth.uid;
    }
    
    // Regras para a coleção de oficinas
    match /workshops/{workshopId} {
      // Todos usuários autenticados podem ler oficinas (busca/listagem)
      allow read: if isAuthenticated();
      
      // Apenas usuários autenticados podem criar oficinas
      allow create: if isAuthenticated() && 
                       request.resource.data.ownerId == request.auth.uid &&
                       request.resource.data.keys().hasAll(['name', 'ownerId', 'createdAt']);
      
      // Apenas o dono pode atualizar
      allow update: if isWorkshopOwner(workshopId);
      
      // Apenas o dono pode excluir
      allow delete: if isWorkshopOwner(workshopId);
      
      // Subcoleção de ordens de serviço
      match /job_orders/{orderId} {
        // Oficina e cliente podem ler suas ordens
        allow read: if isAuthenticated() && (
          isWorkshopOwner(workshopId) ||
          resource.data.customerId == request.auth.uid
        );
        
        // Apenas a oficina pode criar ordens
        allow create: if isAuthenticated() && isWorkshopOwner(workshopId);
        
        // Oficina pode atualizar tudo, cliente pode apenas aprovar/rejeitar
        allow update: if isAuthenticated() && (
          isWorkshopOwner(workshopId) ||
          (resource.data.customerId == request.auth.uid && 
           request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status', 'customerComment', 'updatedAt']))
        );
        
        // Apenas a oficina pode excluir
        allow delete: if isWorkshopOwner(workshopId);
      }
    }
    
    // Regras para avaliações de oficinas
    match /workshop_reviews/{reviewId} {
      // Todos podem ler avaliações
      allow read: if isAuthenticated();
      
      // Usuário pode criar avaliação com rating válido
      allow create: if isAuthenticated() && 
                       request.resource.data.userId == request.auth.uid &&
                       request.resource.data.rating >= 1 &&
                       request.resource.data.rating <= 5 &&
                       request.resource.data.keys().hasAll(['workshopId', 'userId', 'rating', 'createdAt']);
      
      // Apenas o autor pode atualizar sua avaliação
      allow update: if isAuthenticated() && resource.data.userId == request.auth.uid;
      
      // Apenas o autor pode excluir sua avaliação
      allow delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
    }
    
    // Regras para agendamentos
    match /appointments/{appointmentId} {
      // Cliente e oficina podem ler seus agendamentos
      allow read: if isAuthenticated() && (
        resource.data.userId == request.auth.uid ||
        isWorkshopOwner(resource.data.workshopId)
      );
      
      // Cliente pode criar agendamento
      allow create: if isAuthenticated() && 
                       request.resource.data.userId == request.auth.uid &&
                       request.resource.data.keys().hasAll(['workshopId', 'userId', 'vehicleId', 'requestedDate', 'status', 'createdAt']);
      
      // Cliente e oficina podem atualizar
      allow update: if isAuthenticated() && (
        resource.data.userId == request.auth.uid ||
        isWorkshopOwner(resource.data.workshopId)
      );
      
      // Cliente e oficina podem cancelar/excluir
      allow delete: if isAuthenticated() && (
        resource.data.userId == request.auth.uid ||
        isWorkshopOwner(resource.data.workshopId)
      );
    }
    
    // Bloquear acesso a todas as outras coleções
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
